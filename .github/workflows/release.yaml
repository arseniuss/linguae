name: Create Release

on:
  push:
    tags:
      - 'v*'  # Runs when a tag like v1.0.0 is pushed

jobs:
  build:
    name: Build and Sign APK
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Set up JDK
        uses: actions/setup-java@v3
        with:
          distribution: 'temurin'
          java-version: '17'

      - name: Setup Gradle Caching
        uses: gradle/gradle-build-action@v2

      - name: Decode Keystore
        env:
          ENCODED_KEYSTORE: ${{ secrets.KEYSTORE_BASE64 }}
        run: |
          echo "$ENCODED_KEYSTORE" | base64 --decode > app/keystore.jks

      - name: Build Release APK
        env:
          GIT_TAG: ${{ github.ref_name }}
        run: ./gradlew assembleRelease -PgitTag=${{ github.ref_name }}

      - name: Sign APK
        env:
          KEYSTORE_PASSWORD: ${{ secrets.KEYSTORE_PASSWORD }}
          KEY_ALIAS: ${{ secrets.KEY_ALIAS }}
          KEY_PASSWORD: ${{ secrets.KEY_PASSWORD }}
        run: |
          jarsigner -verbose -sigalg SHA256withRSA -digestalg SHA-256 \
            -keystore app/keystore.jks \
            -storepass "$KEYSTORE_PASSWORD" \
            -keypass "$KEY_PASSWORD" \
            app/build/outputs/apk/release/linguae-app-${{ github.ref_name }}-release.apk "$KEY_ALIAS"

      - name: Align APK
        run: |
          ${ANDROID_SDK_ROOT}/build-tools/34.0.0/zipalign -v 4 \
            app/build/outputs/apk/release/linguae-app-${{ github.ref_name }}-release.apk \
            app/build/outputs/apk/release/linguae-app-${{ github.ref_name }}.apk

      - name: Upload Release APK as Artifact
        uses: actions/upload-artifact@v4
        with:
          name: release-apk
          path: app/build/outputs/apk/release/linguae-app-${{ github.ref_name }}.apk

  parser:
    name: Build content repository parser
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Set up JDK
        uses: actions/setup-java@v3
        with:
          distribution: 'temurin'
          java-version: '17'

      - name: Setup Gradle Caching
        uses: gradle/gradle-build-action@v2

      - name: Build parser
        env:
          GIT_TAG: ${{ github.ref_name }}
        run: |
          ./gradlew createRunnableJar -PgitTag=${{ github.ref_name }}

      - name: Test parser
        run: java -jar parser/build/libs/linguae-parser-${{ github.ref_name }}-debug.jar -h

      - name: Test parser
        run: java -jar parser/build/libs/linguae-parser-${{ github.ref_name }}-release.jar -h

      - name: Upload Java executable
        uses: actions/upload-artifact@v4
        with:
          name: release-jar
          path: parser/build/libs/linguae-parser-${{ github.ref_name }}-release.jar

  release:
    name: Create GitHub Release
    needs: [ build, parser ]
    runs-on: ubuntu-latest
    permissions:
      contents: write

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Generate Release Notes
        run: |
          # Get the latest release tag
          LATEST_RELEASE_TAG=$(git tag --list --sort=-v:refname | sed -n '2p')

          # Check if the LATEST_RELEASE_TAG is empty (no tags in the repo yet)
          if [ -z "$LATEST_RELEASE_TAG" ]; then
            # If there is no tag, use the first commit in the repository
            LATEST_RELEASE_TAG=$(git rev-list --max-parents=0 --first-parent HEAD)
            echo "No tags found. Using first commit: $LATEST_RELEASE_TAG"
          else
            echo "Latest release tag: $LATEST_RELEASE_TAG"
          fi

          # Get all commit messages since the last release tag
          COMMITS=$(git log $LATEST_RELEASE_TAG..${{ github.ref_name }} --pretty=format:"- %s")

          # Format the commit messages as release notes
          echo -e "Release Notes:\n$COMMITS" > ${{ github.workspace }}-CHANGELOG.txt

      - name: Download Built APK
        uses: actions/download-artifact@v4
        with:
          name: release-apk
          path: ./downloads/

      - name: Download Built Jar
        uses: actions/download-artifact@v4
        with:
          name: release-jar
          path: ./downloads/

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v1
        with:
          files: |
            ./downloads/linguae-app-${{ github.ref_name }}.apk
            ./downloads/linguae-parser-${{ github.ref_name }}-release.jar
          token: ${{ secrets.GITHUB_TOKEN }}
          tag_name: ${{ github.ref_name }}
          draft: false
          generate_release_notes: true
          prerelease: true
          name: Release of ${{ github.ref_name }}
          body_path: ${{ github.workspace }}-CHANGELOG.txt
