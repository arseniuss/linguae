import com.android.build.gradle.tasks.ExtractAnnotations

plugins {
    id 'com.android.library'
}

android {
    namespace = 'lv.id.arseniuss.linguae'
    compileSdk 36

    defaultConfig {
        minSdk 24
    }

    buildTypes {
        release {
            minifyEnabled false
        }
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_11
        targetCompatibility JavaVersion.VERSION_11
    }
}

// Generate Version.java
def generateVersionClass = tasks.register('generateVersionClass') {
    def outputDir = file("$buildDir/generated/source/version/main")
    def packagePath = "lv/id/arseniuss/linguae"

    outputs.dir(outputDir)

    doFirst {
        def versionFile = file("$outputDir/$packagePath/Version.java")
        versionFile.parentFile.mkdirs()
        versionFile.text = """
package lv.id.arseniuss.linguae;

public class Version {
    public static final String VERSION = "${rootProject.ext.versionName}";
}
"""
    }
}

// Let Android know this generated source belongs to "main" and must be built first
android.libraryVariants.configureEach { variant ->
    variant.registerJavaGeneratingTask(generateVersionClass.get(), file("$buildDir/generated/source/version/main"))
}

// Ensure annotation extraction waits for version class generation
tasks.withType(ExtractAnnotations).configureEach {
    dependsOn(generateVersionClass)
}

dependencies {
    implementation 'com.google.code.gson:gson:2.13.1'
}

configurations {
    jarDependencies {
        canBeResolved = true
        canBeConsumed = false
        extendsFrom implementation
    }
}

android.libraryVariants.configureEach { variant ->
    def variantName = variant.name.capitalize()
    def compileTask = variant.javaCompileProvider.get()

    tasks.register("create${variantName}RunnableJar", Jar) {
        dependsOn(compileTask, generateVersionClass)
        archiveBaseName.set("linguae-parser-${rootProject.ext.versionName}-${variant.name}")

        // Pull classes from the compile task output dynamically
        from compileTask.destinationDirectory

        // Include generated sources if needed
        from("$buildDir/generated/source/version/main")

        manifest {
            attributes(
                    'Main-Class': 'lv.id.arseniuss.linguae.Main',
                    'Implementation-Version': rootProject.ext.versionName
            )
        }
    }
}

tasks.register('createRunnableJar') {
    group = 'build'
    description = 'Builds both debug and release runnable JARs'
    dependsOn('createDebugRunnableJar', 'createReleaseRunnableJar')
}
